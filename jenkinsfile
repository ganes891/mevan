pipeline {
	agent any
	parameters {
            
            string(name: 'JiraTicket', defaultValue: '', description: 'Enter the JIRA ID for this Build')
            
//			string(name: 'branch', defaultValue: '', description: 'Enter the Git Branch for this Build')
			
			choice(
			choices: ['','dev-build','staging-build','prod-build','deploy','backup'], 
			description: 'Choose the requried build method carefully', 
			name: 'ACTION')
									
			extendedChoice(
			description: 'Choose only one Microservice to Build and deploy',
			multiSelectDelimiter: ',',
			name: 'environment',
			quoteValue: false,
			saveJSONParameterToFile: false,
			type: 'PT_CHECKBOX',
			value:'dev, staging, prod', 
			visibleItemCount: 8)
			
			choice(
			choices: ['no', 'yes' ],
			description: 'Choose NO if you want to keep the build till the next build', 
			name: 'RemoveWorkspace')
			
		}
		stages  {
		    
		    stage('Pre-Notification') {
               steps{
                 mail bcc: '', body: "<b>JobDetails</b> <br>Project: ${env.JOB_NAME}  <br>Build Number:#${env.BUILD_NUMBER} <br>Jenkins job URL: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: 'ITSM-ECE-JOB@jenkins-master.vsnl.co.in', mimeType: 'text/html', replyTo: '', subject: "Job ${env.JOB_NAME} Triggered: JIRA #${params.JiraTicket} and your approval required ", to: "Aarthi.Durai@ctc-g.com.sg,rohith.ravi@ctc-g.com.sg";
                
            }
		    }
			
			stage('Approval') {
            // no agent, so executors are not used up when waiting for approvals
            agent none
            steps {
                script {
                    def deploymentDelay = input id: 'Deploy', message: 'Build & Deploy to production?', submitter: 'gkandasa,Aarthi.Durai@ctc-g.com.sg,rohith.ravi@ctc-g.com.sg,admin', parameters: [choice(choices: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24'], description: 'Minutes to delay deployment?', name: 'deploymentDelay')]
                    sleep time: deploymentDelay.toInteger(), unit: 'MINUTES'
                    }
                 }
            }
		    
			stage('clean-wrkspace'){
				when {
					expression { params.RemoveWorkspace == 'yes' }
				}
			steps{
			cleanWs()
			}
		}
	     	
		stage('Chkout-GitBranch') {
			when {
					expression { params.ACTION == 'dev-build' || params.ACTION == 'staging-build' || params.ACTION == 'prod-build' }
				}
			
			steps {
				 
			     sh 'git clone -b ${branch} http://gitlab+deploy-token-2:zy7pkGxkLiaRb488-A_m@stg.opstic.ctc-g.com.sg/gitlab/root/event-correlation.git'
				 sh 'chmod 777 event-correlation -R'
                 
			}
			
			}
		stage('Maven-Build-dev') {
			when {
					expression { params.ACTION == 'dev-build'}
				}
			
			steps {
			dir ('event-correlation/ec-root'){
			     sh '/usr/local/maven/bin/mvn clean install -Pdev'
                 
			}
			}
			}
		stage('Maven-Build-staging') {
			when {
					expression { params.ACTION == 'staging-build'}
				}
			
			steps {
			dir ('event-correlation/ec-root'){
			     sh 'mvn clean install'
				}
                 
			}
			
			}
			
		stage('Maven-Build-Prod') {
			when {
					expression { params.ACTION == 'prod-build'}
				}
			
			steps {
			dir ('event-correlation/ec-root'){
			     sh '/usr/local/maven/bin/mvn clean install -Pprod'
				}
			}
			
			}
        
			stage('DEV-DEPLOYMENT') {
			    when {
					expression { params.environment == 'dev'}
				}
				steps{
                dir ('/opt/itsm/ansible_ecengine') {
                    sh 'ansible-playbook -i inventory_itsm deploy.yml --extra-vars "SERVER=${environment}" --extra-vars "ACTION=${ACTION}" --extra-vars "WORKSPACE_PATH=${WORKSPACE}"'
                    
				}
				}
            }
			
			stage('STAGING-DEPLOYMENT') {
			    when {
					expression { params.environment == 'staging' }
				}
				steps{
                dir ('/opt/itsm/ansible_ecengine') {
                    sh 'ansible-playbook -i inventory_itsm deploy.yml --extra-vars "SERVER=${environment}" --extra-vars "ACTION=${ACTION}" --extra-vars "WORKSPACE_PATH=${WORKSPACE}"'
				}
				}
            }
			
			stage('PROD-DEPLOYMENT') {
			    when {
					expression { params.environment == 'prod' }
				}
				steps{
                dir ('/opt/itsm/ansible_ecengine') {
                sh 'ansible-playbook -i inventory_itsm deploy.yml --extra-vars "SERVER=${environment}" --extra-vars "ACTION=${ACTION}" --extra-vars "WORKSPACE_PATH=${WORKSPACE}"'
				}
				}
            }

    }

		 post {  
         success {  
             mail bcc: '', body: "<b>JobDetails</b><br>Project: ${env.JOB_NAME} <br>Build Number:# ${env.BUILD_NUMBER} <br> Jenkins job URL: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: 'ITSM-ECE-JOB@jenkins-master.vsnl.co.in', mimeType: 'text/html', replyTo: '', subject: "Job is SUCESSFUL: ${env.JOB_NAME}#${env.BUILD_NUMBER} JIRA Ticket #${params.JiraTicket}", to: "Aarthi.Durai@ctc-g.com.sg,rohith.ravi@ctc-g.com.sg";
         }  
         failure {  
             mail bcc: '', body: "<b>JobDetails</b><br>Project: ${env.JOB_NAME} <br>Build Number:# ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: 'ITSM-ECE-JOB@jenkins-master.vsnl.co.in', mimeType: 'text/html', replyTo: '', subject: "Job Failed: Project name -> ${env.JOB_NAME} JIRA Ticket#${params.JiraTicket}", to: "Aarthi.Durai@ctc-g.com.sg,rohith.ravi@ctc-g.com.sg";  
         }  
         unstable { 
             mail bcc: '', body: "<b>JobDetails</b><br>Project: ${env.JOB_NAME} <br>Build Number:# ${env.BUILD_NUMBER} <br> Jenkins job URL: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: 'ITSM-ECE-JOB@jenkins-master.vsnl.co.in', mimeType: 'text/html', replyTo: '', subject: "Job unstable: Project name -> ${env.JOB_NAME} JIRA Ticket#${params.JiraTicket}", to: "Aarthi.Durai@ctc-g.com.sg,rohith.ravi@ctc-g.com.sg";
         }  
        
     }    
		    
}
